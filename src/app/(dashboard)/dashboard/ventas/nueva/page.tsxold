// src/app/(dashboard)/dashboard/ventas/nueva/page.tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Search, Zap, Banknote, CreditCard } from 'lucide-react';
import { useCartStore } from '@/stores/cartStore';
import { useAuthStore } from '@/stores/authStore';
import { formatCurrency, cn } from '@/lib/utils';
import ProductModal from '@/components/sales/ProductModal';
import PaymentModal from '@/components/sales/PaymentModal';
import type { Payment, Product } from '@/types';

export default function NuevaVentaPage() {
  const router = useRouter();
  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [search, setSearch] = useState('');
  const [loading, setLoading] = useState(false);
  const [cashRegister, setCashRegister] = useState<any>(null);
  
  // Modales
  const [showProductModal, setShowProductModal] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentMode, setPaymentMode] = useState<'exact' | 'change' | 'card' | null>(null);
  
  const { items, addItem, updateQuantity, removeItem, getTotal, clearCart } = useCartStore();
  const { user } = useAuthStore();

  useEffect(() => {
    checkCashRegister();
  }, []);

  useEffect(() => {
    if (cashRegister) {
      loadProducts();
    }
  }, [cashRegister]);

  useEffect(() => {
    const filtered = products.filter(p =>
      p.name.toLowerCase().includes(search.toLowerCase()) && p.active
    );
    setFilteredProducts(filtered);
  }, [search, products]);

  const checkCashRegister = async () => {
    try {
      const response = await fetch('/api/cash-register/current');
      const data = await response.json();

      if (data.success && data.data) {
        setCashRegister(data.data);
      } else {
        if (confirm('No tienes una caja abierta. ¿Deseas abrir una?')) {
          router.push('/dashboard/caja/abrir');
        } else {
          router.push('/dashboard');
        }
      }
    } catch (error) {
      console.error('Error al verificar caja:', error);
    }
  };

  const loadProducts = async () => {
    try {
      setLoading(true);
      const response = await fetch(
        `/api/products?active=true&cashRegisterId=${cashRegister.id}`
      );
      const data = await response.json();

      if (data.success) {
        setProducts(data.data);
        setFilteredProducts(data.data);
      }
    } catch (error) {
      console.error('Error al cargar productos:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleProductClick = (product: Product) => {
    setSelectedProduct(product);
    setShowProductModal(true);
  };

  const handleProductConfirm = (data: {
    quantity: number;
    unitPrice: number;
    isSpecialPrice: boolean;
    specialPriceReason?: string;
  }) => {
    if (!selectedProduct) return;

    const existingItem = items.find(i => i.productId === selectedProduct.id);

    if (existingItem) {
      updateQuantity(
        selectedProduct.id, 
        existingItem.quantity + data.quantity
      );
    } else {
      // ✅ Agregar con TODOS los campos
      addItem({
        productId: selectedProduct.id,
        productName: selectedProduct.name,
        unitPrice: data.unitPrice,
        quantity: data.quantity,
        isSpecialPrice: data.isSpecialPrice,        // ← Nuevo campo
        specialPriceReason: data.specialPriceReason, // ← Nuevo campo
      });
    }

    setSelectedProduct(null);
  };

  const handlePayment = (mode: 'exact' | 'change' | 'card') => {
    if (items.length === 0) {
      alert('Agrega productos al carrito');
      return;
    }
    setPaymentMode(mode);
    setShowPaymentModal(true);
  };

  const handleCompleteSale = async (payments: Payment[]) => {
    // ============================================
    // OPCIÓN A: ESPERAR RESPUESTA (SEGURA)
    // ============================================
    setLoading(true);

    try {
      // Preparar datos con TODOS los campos
      const saleData = {
        items: items.map(item => ({
          productId: item.productId,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          subtotal: item.subtotal,
          isSpecialPrice: item.isSpecialPrice || false,     // ← Campo completo
          specialPriceReason: item.specialPriceReason,      // ← Campo completo
        })),
        payments: payments.map(p => ({
          paymentMethod: p.paymentMethod,
          amount: p.amount,
          reference: p.reference || undefined,
        })),
        total: getTotal(),
        locationId: cashRegister?.location_id || undefined,
      };

      // ✅ ESPERAR respuesta del servidor (300-500ms)
      const response = await fetch('/api/sales', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(saleData),
      });

      const data = await response.json();

      // ✅ VALIDAR respuesta ANTES de limpiar
      if (!response.ok) {
        throw new Error(data.error || 'Error al completar la venta');
      }

      // ✅ SOLO SI ES EXITOSO, limpiar UI
      clearCart();
      setShowPaymentModal(false);
      setPaymentMode(null);
      
      alert('¡Venta completada exitosamente!');
      
      // Recargar productos para actualizar scores (background)
      loadProducts();

    } catch (error: any) {
      console.error('Error:', error);
      
      // ❌ SI FALLA, NO limpiar carrito
      // Usuario puede ver el error y reintentar
      alert(error.message || 'Error al completar la venta. Intenta nuevamente.');
      
    } finally {
      setLoading(false);
    }
  };

  const total = getTotal();

  return (
    <div className="flex flex-col h-screen">
      <div className="flex-1 overflow-y-auto pt-4 pb-[200px]">
        <div id="productos-grid" className="px-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-3 mb-6">
          {loading ? (
            <div className="col-span-full text-center py-12 text-muted-foreground">
              Cargando productos...
            </div>
          ) : filteredProducts.length === 0 ? (
            <div className="col-span-full text-center py-12 text-muted-foreground">
              {search ? 'No se encontraron productos' : 'No hay productos disponibles'}
            </div>
          ) : (
            filteredProducts.map((product) => (
              <button
                key={product.id}
                onClick={() => handleProductClick(product)}
                className={cn(
                  'bg-card border-2 border-border rounded-xl p-4',
                  'hover:border-primary hover:bg-primary/5 transition-all',
                  'text-left min-h-[100px] flex flex-col justify-between',
                  'active:scale-95'
                )}
              >
                <div>
                  <div className="font-bold text-foreground text-lg mb-1">
                    {product.name}
                  </div>
                  {product.unit_type && (
                    <div className="text-xs text-muted-foreground">
                      por {product.unit_type}
                    </div>
                  )}
                </div>
                <div className="text-primary font-bold text-xl mt-2">
                  {formatCurrency(Number(product.current_price))}
                </div>
              </button>
            ))
          )}
        </div>

        {items.length > 0 && (
          <div className="px-4 mb-6">
            <div className="bg-card border-2 border-border rounded-xl p-4">
              <h3 className="font-bold text-lg mb-4">Productos en el carrito</h3>
              <div className="space-y-2">
                {items.map((item) => (
                  <div key={item.productId} className="flex items-center justify-between py-2 border-b border-border last:border-0">
                    <div className="flex-1 min-w-0 pr-2">
                      <div className="font-medium text-foreground truncate">
                        {item.productName}
                        {item.isSpecialPrice && (
                          <span className="ml-2 text-xs bg-primary/20 text-primary px-2 py-0.5 rounded">
                            Precio especial
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-muted-foreground">
                        {formatCurrency(item.unitPrice)} x {item.quantity}
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <div className="flex items-center gap-1">
                        <button
                          onClick={() => updateQuantity(item.productId, item.quantity - 1)}
                          className="w-8 h-8 rounded-lg bg-secondary hover:bg-secondary/80 flex items-center justify-center font-bold text-lg"
                        >
                          -
                        </button>
                        <span className="w-8 text-center font-bold">{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(item.productId, item.quantity + 1)}
                          className="w-8 h-8 rounded-lg bg-secondary hover:bg-secondary/80 flex items-center justify-center font-bold text-lg"
                        >
                          +
                        </button>
                      </div>
                      <div className="font-bold text-base min-w-[80px] text-right">
                        {formatCurrency(item.subtotal)}
                      </div>
                      <button
                        onClick={() => removeItem(item.productId)}
                        className="text-destructive hover:text-destructive/80 font-bold px-2 text-xl"
                      >
                        ✕
                      </button>
                    </div>
                  </div>
                ))}
              </div>

              <button
                onClick={() => {
                  if (confirm('¿Cancelar el pedido actual?')) {
                    clearCart();
                  }
                }}
                className="w-full mt-4 py-3 rounded-lg bg-destructive/10 text-destructive font-bold hover:bg-destructive/20 transition-colors"
              >
                Cancelar Pedido
              </button>
            </div>
          </div>
        )}
      </div>

      <div className="fixed bottom-[88px] left-0 right-0 lg:left-72 z-30 px-4 py-3 bg-background/95 backdrop-blur-sm border-t border-border">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-muted-foreground pointer-events-none" />
          <input
            type="text"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            onFocus={() => {
              setTimeout(() => {
                window.scrollTo({ top: 0, behavior: 'smooth' });
              }, 100);
            }}
            placeholder="Buscar producto..."
            className={cn(
              'w-full pl-10 pr-4 py-3 rounded-lg border-2 border-input',
              'bg-background text-foreground',
              'text-base',
              'focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent'
            )}
          />
        </div>
      </div>

      <div className="fixed bottom-0 left-0 right-0 lg:left-72 z-40 px-4 py-3 bg-card border-t-2 border-border">
        <div className="grid grid-cols-3 gap-2">
          <button
            onClick={() => handlePayment('exact')}
            disabled={items.length === 0 || loading}
            className={cn(
              'flex flex-col items-center justify-center gap-1 p-3 rounded-xl',
              'font-bold transition-all',
              items.length === 0 || loading
                ? 'bg-secondary/50 text-muted-foreground cursor-not-allowed'
                : 'bg-green-500 text-white hover:bg-green-600 active:scale-95'
            )}
          >
            <Zap className="w-5 h-5" />
            <span className="text-xs leading-tight">
              {loading ? 'Procesando...' : 'EFECTIVO'}
            </span>
          </button>

          <button
            onClick={() => handlePayment('change')}
            disabled={items.length === 0 || loading}
            className={cn(
              'flex flex-col items-center justify-center gap-1 p-3 rounded-xl',
              'font-bold transition-all',
              items.length === 0 || loading
                ? 'bg-secondary/50 text-muted-foreground cursor-not-allowed'
                : 'bg-blue-500 text-white hover:bg-blue-600 active:scale-95'
            )}
          >
            <Banknote className="w-5 h-5" />
            <span className="text-xs leading-tight">
              {loading ? 'Procesando...' : 'VUELTO'}
            </span>
          </button>

          <button
            onClick={() => handlePayment('card')}
            disabled={items.length === 0 || loading}
            className={cn(
              'flex flex-col items-center justify-center gap-1 p-3 rounded-xl',
              'font-bold transition-all',
              items.length === 0 || loading
                ? 'bg-secondary/50 text-muted-foreground cursor-not-allowed'
                : 'bg-purple-500 text-white hover:bg-purple-600 active:scale-95'
            )}
          >
            <CreditCard className="w-5 h-5" />
            <span className="text-xs leading-tight">
              {loading ? 'Procesando...' : 'TARJETA'}
            </span>
          </button>
        </div>
      </div>

      <ProductModal
        isOpen={showProductModal}
        onClose={() => {
          setShowProductModal(false);
          setSelectedProduct(null);
        }}
        product={selectedProduct}
        currentQuantity={
          selectedProduct
            ? items.find(i => i.productId === selectedProduct.id)?.quantity
            : undefined
        }
        currentPrice={
          selectedProduct
            ? items.find(i => i.productId === selectedProduct.id)?.unitPrice
            : undefined
        }
        onConfirm={handleProductConfirm}
      />

      {showPaymentModal && paymentMode && (
        <PaymentModal
          isOpen={showPaymentModal}
          onClose={() => {
            setShowPaymentModal(false);
            setPaymentMode(null);
          }}
          onComplete={handleCompleteSale}
          total={total}
          mode={paymentMode}
        />
      )}
    </div>
  );
}
