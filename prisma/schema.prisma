// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANT (Negocio)
// ============================================
model Tenant {
  id                String   @id @default(uuid())
  business_name     String
  phone             String   @unique
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  // Configuración
  currency          String   @default("CLP")
  theme             String   @default("high_contrast")
  
  // Límites del plan (cache)
  plan_limits       Json?
  
  // Relaciones
  users             User[]
  products          Product[]
  sales             Sale[]
  purchases         Purchase[]
  providers         Provider[]
  locations         Location[]
  cash_registers    CashRegister[]
  subscription      Subscription?
  
  @@index([phone])
}

// ============================================
// SUBSCRIPTION PLAN (Planes)
// ============================================
model SubscriptionPlan {
  id            String   @id @default(uuid())
  name          String   // "Free", "Pro", "Enterprise"
  price         Decimal  @db.Decimal(10, 2)
  features      Json     // Límites y features del plan
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
  
  subscriptions Subscription[]
  
  @@index([active])
}

// ============================================
// SUBSCRIPTION (Suscripción activa)
// ============================================
model Subscription {
  id                      String   @id @default(uuid())
  tenant_id               String   @unique
  plan_id                 String
  status                  String   @default("active") // active, cancelled, expired
  
  current_period_start    DateTime
  current_period_end      DateTime
  
  payment_method_id       String?
  
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  
  tenant                  Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  plan                    SubscriptionPlan @relation(fields: [plan_id], references: [id])
  payments                SubscriptionPayment[]
  
  @@index([tenant_id])
  @@index([status])
  @@index([current_period_end])
}

// ============================================
// SUBSCRIPTION PAYMENT (Historial de pagos)
// ============================================
model SubscriptionPayment {
  id              String   @id @default(uuid())
  subscription_id String
  amount          Decimal  @db.Decimal(10, 2)
  status          String   // pending, completed, failed
  payment_date    DateTime @default(now())
  
  payment_gateway String?  // "flow", "stripe", "transbank"
  transaction_id  String?
  
  subscription    Subscription @relation(fields: [subscription_id], references: [id], onDelete: Cascade)
  
  @@index([subscription_id])
  @@index([status])
}

// ============================================
// USER (Usuario) - Login por TELÉFONO
// ============================================
model User {
  id           String   @id @default(uuid())
  tenant_id    String
  phone        String   @unique
  email        String?
  password     String
  name         String
  role         String   @default("owner")
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  tenant       Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  sales        Sale[]
  cash_registers CashRegister[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([phone])
}

// ============================================
// PRODUCT (Producto) - PARTICIONADO + TRACKING
// ============================================
model Product {
  id           String   @id @default(uuid())
  tenant_id    String
  name         String
  unit_type    String?  // "kg", "unidad", "caja", etc
  
  // Estado actual (cache)
  current_price      Decimal? @db.Decimal(10, 2)
  current_stock      Decimal? @db.Decimal(10, 3)
  
  // Estado de visibilidad
  status       String   @default("active") // active, hidden, sold_out
  alert_stock  Decimal? @db.Decimal(10, 3)
  
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  tenant              Tenant              @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  sale_items          SaleItem[]
  purchase_items      PurchaseItem[]
  product_prices      ProductPrice[]
  price_history       ProductPriceHistory[]
  stock_history       ProductStockHistory[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, active])
  @@index([tenant_id, status])
}

// ============================================
// PRODUCT_PRICE (Precios por volumen)
// ============================================
model ProductPrice {
  id          String   @id @default(uuid())
  tenant_id   String
  product_id  String
  
  quantity    Decimal  @db.Decimal(10, 3) // 1, 3, 12
  price       Decimal  @db.Decimal(10, 2)
  label       String?  // "Unidad", "Promo 3x", "Caja 12"
  
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@unique([id, tenant_id])
  @@index([tenant_id, product_id, active])
}

// ============================================
// PRODUCT_PRICE_HISTORY (Historial de precios)
// ============================================
model ProductPriceHistory {
  id              String   @id @default(uuid())
  tenant_id       String
  product_id      String
  
  old_price       Decimal? @db.Decimal(10, 2)
  new_price       Decimal  @db.Decimal(10, 2)
  
  change_reason   String?  // "apertura_dia", "descuento_tarde", "promocion", "manual"
  changed_by      String
  
  changed_at      DateTime @default(now())
  
  // Contexto del momento
  stock_at_change Decimal? @db.Decimal(10, 3)
  hour_of_day     Int?
  
  product         Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([tenant_id, product_id, changed_at])
  @@index([changed_at])
  @@index([hour_of_day])
}

// ============================================
// PRODUCT_STOCK_HISTORY (Historial de stock)
// ============================================
model ProductStockHistory {
  id              String   @id @default(uuid())
  tenant_id       String
  product_id      String
  
  old_stock       Decimal? @db.Decimal(10, 3)
  new_stock       Decimal  @db.Decimal(10, 3)
  change_amount   Decimal  @db.Decimal(10, 3)
  
  change_type     String   // "compra", "venta", "ajuste", "perdida"
  reference_id    String?
  
  changed_by      String
  changed_at      DateTime @default(now())
  
  notes           String?
  
  product         Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  
  @@index([tenant_id, product_id, changed_at])
  @@index([change_type])
}

// ============================================
// PROVIDER (Proveedor)
// ============================================
model Provider {
  id           String   @id @default(uuid())
  tenant_id    String
  name         String
  phone        String?
  email        String?
  address      String?
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  tenant       Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  purchases    Purchase[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, active])
}

// ============================================
// LOCATION (Ubicación/Feria)
// ============================================
model Location {
  id           String   @id @default(uuid())
  tenant_id    String
  name         String
  address      String?
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  tenant       Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  sales        Sale[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, active])
}

// ============================================
// CASH_REGISTER (Caja)
// ============================================
model CashRegister {
  id              String   @id @default(uuid())
  tenant_id       String
  user_id         String
  location_id     String?
  
  opening_amount  Decimal  @db.Decimal(10, 2)
  closing_amount  Decimal? @db.Decimal(10, 2)
  
  opened_at       DateTime @default(now())
  closed_at       DateTime?
  
  status          String   @default("open")
  
  notes           String?
  
  tenant          Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [user_id], references: [id])
  sales           Sale[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, status])
  @@index([user_id])
}

// ============================================
// SALE (Venta) - PARTICIONADO
// ============================================
model Sale {
  id                String   @id @default(uuid())
  tenant_id         String
  user_id           String
  cash_register_id  String?
  location_id       String?
  
  total             Decimal  @db.Decimal(10, 2)
  
  sale_date         DateTime @default(now())
  
  synced            Boolean  @default(false)
  local_id          String?
  
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  tenant            Tenant        @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [user_id], references: [id])
  cash_register     CashRegister? @relation(fields: [cash_register_id], references: [id])
  location          Location?     @relation(fields: [location_id], references: [id])
  items             SaleItem[]
  payments          Payment[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, sale_date])
  @@index([user_id])
  @@index([cash_register_id])
  @@index([synced])
}

// ============================================
// SALE_ITEM (Item de Venta) - CON SNAPSHOT
// ============================================
model SaleItem {
  id           String   @id @default(uuid())
  tenant_id    String
  sale_id      String
  product_id   String
  
  quantity     Decimal? @db.Decimal(10, 3)  // ← Ahora opcional (NULL para precio especial)
  unit_price   Decimal  @db.Decimal(10, 2)
  subtotal     Decimal  @db.Decimal(10, 2)
  
  // Snapshot para histórico
  product_name String?
  
  // Identificar ventas con precio especial
  is_special_price Boolean @default(false)
  
  sale         Sale     @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  product      Product  @relation(fields: [product_id], references: [id])
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([sale_id])
  @@index([product_id])
  @@index([tenant_id, is_special_price])  // Para reportes de ventas especiales
}

// ============================================
// PAYMENT (Pago)
// ============================================
model Payment {
  id              String   @id @default(uuid())
  tenant_id       String
  sale_id         String
  
  payment_method  String
  amount          Decimal  @db.Decimal(10, 2)
  
  reference       String?
  
  created_at      DateTime @default(now())
  
  sale            Sale     @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([sale_id])
}

// ============================================
// PURCHASE (Compra a Proveedor)
// ============================================
model Purchase {
  id              String   @id @default(uuid())
  tenant_id       String
  provider_id     String?
  
  total           Decimal  @db.Decimal(10, 2)
  purchase_date   DateTime @default(now())
  
  notes           String?
  
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  tenant          Tenant         @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  provider        Provider?      @relation(fields: [provider_id], references: [id])
  items           PurchaseItem[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([tenant_id, purchase_date])
  @@index([provider_id])
}

// ============================================
// PURCHASE_ITEM (Item de Compra)
// ============================================
model PurchaseItem {
  id              String   @id @default(uuid())
  tenant_id       String
  purchase_id     String
  product_id      String?
  
  description     String
  quantity        Decimal  @db.Decimal(10, 3)
  unit_price      Decimal  @db.Decimal(10, 2)
  subtotal        Decimal  @db.Decimal(10, 2)
  
  update_stock    Boolean  @default(false)
  
  purchase        Purchase @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  product         Product? @relation(fields: [product_id], references: [id])
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([purchase_id])
  @@index([product_id])
}

// ============================================
// SYNC_QUEUE (Cola de Sincronización Offline)
// ============================================
model SyncQueue {
  id              String   @id @default(uuid())
  tenant_id       String
  
  operation_type  String
  operation_data  Json
  
  status          String   @default("pending")
  error_message   String?
  
  attempts        Int      @default(0)
  
  created_at      DateTime @default(now())
  synced_at       DateTime?
  
  @@index([tenant_id])
  @@index([status])
  @@index([created_at])
}
