// prisma/schema.prisma - VERSIÓN CORREGIDA Y LIMPIA

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TENANT (Negocio)
// ============================================
model Tenant {
  id                String   @id @default(uuid())
  business_name     String
  phone             String   @unique
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  currency          String   @default("CLP")
  theme             String   @default("high_contrast")
  plan_limits       Json?
  
  users             User[]
  product_parents   ProductParent[]
  product_varieties ProductVariety[]
  sales             Sale[]
  purchases         Purchase[]
  suppliers         Supplier[]
  locations         Location[]
  cash_registers    CashRegister[]
  subscription      Subscription?
  product_daily_sales ProductDailySales[]
  
  @@index([phone])
}

// ============================================
// SUBSCRIPTION PLAN
// ============================================
model SubscriptionPlan {
  id            String   @id @default(uuid())
  name          String
  price         Decimal  @db.Decimal(10, 2)
  features      Json
  active        Boolean  @default(true)
  created_at    DateTime @default(now())
  
  subscriptions Subscription[]
  
  @@index([active])
}

// ============================================
// SUBSCRIPTION
// ============================================
model Subscription {
  id                      String   @id @default(uuid())
  tenant_id               String   @unique
  plan_id                 String
  status                  String   @default("active")
  
  current_period_start    DateTime
  current_period_end      DateTime
  
  payment_method_id       String?
  last_payment_date       DateTime?
  next_billing_date       DateTime?
  
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  
  tenant                  Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  plan                    SubscriptionPlan @relation(fields: [plan_id], references: [id])
  
  @@index([tenant_id])
  @@index([plan_id])
  @@index([status])
}

// ============================================
// USER
// ============================================
model User {
  id           String   @id @default(uuid())
  tenant_id    String
  phone        String   @unique
  email        String?
  password     String
  name         String
  role         String   @default("owner")
  active       Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  
  tenant       Tenant   @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  sales        Sale[]
  cash_registers CashRegister[]
  purchases    Purchase[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([phone])
}

// ============================================
// PRODUCT PARENT
// ============================================
model ProductParent {
  id              String   @id @default(uuid())
  tenant_id       String?
  name            String
  is_global       Boolean  @default(false)
  suggested_unit  String?
  active          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  tenant          Tenant?           @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  varieties       ProductVariety[]
  
  @@index([is_global, active, name])
  @@index([tenant_id, active, name])
  @@map("product_parents")
}

// ============================================
// PRODUCT VARIETY
// ============================================
model ProductVariety {
  id              String   @id @default(uuid())
  tenant_id       String
  parent_id       String
  name            String
  unit_type       String
  base_price      Decimal  @db.Decimal(10, 2)
  current_stock   Decimal? @db.Decimal(10, 3)
  alert_stock     Int?
  active          Boolean  @default(true)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  
  tenant          Tenant           @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  parent          ProductParent    @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  price_options   VarietyPriceOption[]
  sale_items      SaleItem[]
  purchase_items  PurchaseItem[]
  price_history   ProductPriceHistory[]
  stock_history   ProductStockHistory[]
  daily_sales     ProductDailySales[]
  
  @@index([tenant_id, parent_id, active])
  @@index([tenant_id, active])
  @@index([name])
  @@map("product_varieties")
}

// ============================================
// VARIETY PRICE OPTION
// ============================================
model VarietyPriceOption {
  id          String   @id @default(uuid())
  variety_id  String
  quantity    Decimal  @db.Decimal(10, 3)
  total_price Decimal  @db.Decimal(10, 2)
  label       String?
  active      Boolean  @default(true)
  created_at  DateTime @default(now())
  
  variety     ProductVariety  @relation(fields: [variety_id], references: [id], onDelete: Cascade)
  
  @@index([variety_id, active])
  @@map("variety_price_options")
}

// ============================================
// PRODUCT PRICE HISTORY
// ============================================
model ProductPriceHistory {
  id              String   @id @default(uuid())
  tenant_id       String
  variety_id      String
  old_price       Decimal  @db.Decimal(10, 2)
  new_price       Decimal  @db.Decimal(10, 2)
  changed_at      DateTime @default(now())
  changed_by      String?
  reason          String?
  stock_at_change Decimal? @db.Decimal(10, 3)
  time_of_day     String?
  day_of_week     Int?
  
  variety         ProductVariety  @relation(fields: [variety_id], references: [id], onDelete: Cascade)
  
  @@index([variety_id, changed_at])
  @@index([tenant_id, changed_at])
}

// ============================================
// PRODUCT STOCK HISTORY
// ============================================
model ProductStockHistory {
  id            String   @id @default(uuid())
  tenant_id     String
  variety_id    String
  old_stock     Decimal  @db.Decimal(10, 3)
  new_stock     Decimal  @db.Decimal(10, 3)
  change_type   String
  reference_id  String?
  changed_at    DateTime @default(now())
  notes         String?
  
  variety       ProductVariety  @relation(fields: [variety_id], references: [id], onDelete: Cascade)
  
  @@index([variety_id, changed_at])
  @@index([tenant_id, change_type])
}

// ============================================
// PRODUCT DAILY SALES
// ============================================
model ProductDailySales {
  id                String   @id @default(uuid())
  tenant_id         String
  cash_register_id  String
  variety_id        String
  sale_count        Int      @default(0)
  last_sale_at      DateTime @default(now())
  date              DateTime @default(now())
  
  tenant            Tenant          @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  cash_register     CashRegister    @relation(fields: [cash_register_id], references: [id], onDelete: Cascade)
  variety           ProductVariety  @relation(fields: [variety_id], references: [id], onDelete: Cascade)
  
  @@unique([cash_register_id, variety_id, date])
  @@index([cash_register_id, sale_count])
  @@index([tenant_id, date])
}

// ============================================
// SALE
// ============================================
model Sale {
  id               String   @id @default(uuid())
  tenant_id        String
  user_id          String
  cash_register_id String
  location_id      String?
  total            Decimal  @db.Decimal(10, 2)
  sale_date        DateTime @default(now())
  synced           Boolean  @default(false)
  local_id         String?
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  
  tenant           Tenant       @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id])
  cash_register    CashRegister @relation(fields: [cash_register_id], references: [id])
  location         Location?    @relation(fields: [location_id], references: [id])
  items            SaleItem[]
  payments         SalePayment[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id, sale_date])
  @@index([cash_register_id])
  @@index([local_id])
}

// ============================================
// SALE ITEM
// ============================================
model SaleItem {
  id               String   @id @default(uuid())
  sale_id          String
  variety_id       String
  product_name     String?
  quantity         Decimal  @db.Decimal(10, 3)
  unit_price       Decimal  @db.Decimal(10, 2)
  subtotal         Decimal  @db.Decimal(10, 2)
  is_special_price Boolean  @default(false)
  special_price_reason String?
  created_at       DateTime @default(now())
  
  sale             Sale           @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  variety          ProductVariety @relation(fields: [variety_id], references: [id])
  
  @@index([sale_id])
  @@index([variety_id])
}

// ============================================
// SALE PAYMENT
// ============================================
model SalePayment {
  id             String        @id @default(uuid())
  sale_id        String
  payment_method PaymentMethod
  amount         Decimal       @db.Decimal(10, 2)
  reference      String?
  created_at     DateTime      @default(now())
  
  sale           Sale          @relation(fields: [sale_id], references: [id], onDelete: Cascade)
  
  @@index([sale_id])
}

// ============================================
// LOCATION (Ubicación)
// ============================================
model Location {
  id         String   @id @default(uuid())
  tenant_id  String
  name       String
  address    String?
  notes      String?  @db.Text
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  tenant     Tenant         @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  sales      Sale[]
  cash_registers CashRegister[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@map("locations")
}

// ============================================
// SUPPLIER (Proveedor)
// ============================================
model Supplier {
  id         String   @id @default(uuid())
  tenant_id  String
  name       String
  phone      String?
  location   String?
  notes      String?  @db.Text
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  
  tenant     Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  purchases  Purchase[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([name])
  @@map("suppliers")
}

// ============================================
// PURCHASE (Compra)
// ============================================
model Purchase {
  id              String           @id @default(uuid())
  tenant_id       String
  user_id         String
  supplier_id     String?
  category        PurchaseCategory
  total           Decimal          @db.Decimal(10, 2)
  document_url    String?
  notes           String?          @db.Text
  purchase_date   DateTime         @default(now())
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  
  tenant          Tenant           @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [user_id], references: [id])
  supplier        Supplier?        @relation(fields: [supplier_id], references: [id])
  items           PurchaseItem[]
  
  @@unique([id, tenant_id])
  @@index([tenant_id])
  @@index([category])
  @@index([purchase_date])
  @@index([supplier_id])
  @@map("purchases")
}

// ============================================
// PURCHASE ITEM
// ============================================
model PurchaseItem {
  id           String   @id @default(uuid())
  purchase_id  String
  variety_id   String
  quantity     Decimal  @db.Decimal(10, 2)
  unit_price   Decimal  @db.Decimal(10, 2)
  subtotal     Decimal  @db.Decimal(10, 2)
  created_at   DateTime @default(now())
  
  purchase     Purchase        @relation(fields: [purchase_id], references: [id], onDelete: Cascade)
  variety      ProductVariety  @relation(fields: [variety_id], references: [id])
  
  @@index([purchase_id])
  @@index([variety_id])
  @@map("purchase_items")
}

// ============================================
// CASH REGISTER
// ============================================
model CashRegister {
  id              String   @id @default(uuid())
  tenant_id       String
  user_id         String
  location_id     String?
  opening_amount  Decimal  @db.Decimal(10, 2)
  closing_amount  Decimal? @db.Decimal(10, 2)
  opened_at       DateTime @default(now())
  closed_at       DateTime?
  status          String   @default("open")
  notes           String?
  
  tenant          Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [user_id], references: [id])
  location        Location?  @relation(fields: [location_id], references: [id])
  sales           Sale[]
  movements       CashMovement[]
  product_daily_sales ProductDailySales[]
  
  @@index([tenant_id, status])
  @@index([user_id, status])
}

// ============================================
// CASH MOVEMENT
// ============================================
model CashMovement {
  id               String   @id @default(uuid())
  cash_register_id String
  type             String
  amount           Decimal  @db.Decimal(10, 2)
  description      String
  reference        String?
  created_at       DateTime @default(now())
  
  cash_register    CashRegister @relation(fields: [cash_register_id], references: [id], onDelete: Cascade)
  
  @@index([cash_register_id, created_at])
}

// ============================================
// AI RECOMMENDATION
// ============================================
model AIRecommendation {
  id            String   @id @default(uuid())
  tenant_id     String
  type          String
  priority      String
  title         String
  description   String
  data          Json?
  is_read       Boolean  @default(false)
  created_at    DateTime @default(now())
  expires_at    DateTime?
  
  @@index([tenant_id, is_read, created_at])
  @@index([tenant_id, type, priority])
}

// ============================================
// ENUM CATEGORÍAS DE COMPRA
// ============================================
enum PurchaseCategory {
  MERCADERIA
  TRANSPORTE_BENCINA
  MATERIALES
  SUELDOS
  PUBLICIDAD
  GASTOS_FIJOS
  IMPREVISTOS_OTROS
}

// ============================================
// ENUM MÉTODOS DE PAGO
// ============================================
enum PaymentMethod {
  cash
  debit
  credit
  transfer
}
